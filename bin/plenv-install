#!/usr/bin/env perl
#
# Summary: Install a Perl version using the perl-build plugin
#
# Usage: plenv install [-v|--verbose] <version>
#        plenv install [-v|--verbose] /path/to/definition
#        plenv install [-v|--verbose] --checkout-dir /path/to/checkout
#        plenv install -l|--list
#
#   -l/--list        List all available versions
#   -v/--verbose     Verbose mode: print compilation status to stdout
#   --as=<NAME>      Install the definition as <NAME>
#   --test           Run test cases
#   --checkout-dir=<DIR> Install (blead HEAD) from a checkout directory
#   --revision=<SHA1> Specify a git revision
#
# For detailed information on installing Perl versions with
# perl-build, including a list of environment variables for adjusting
# compilation, see: https://github.com/tokuhirom/perl-build#usage
use strict;
use warnings;
use 5.008001;
use FindBin;
use lib "$FindBin::Bin/../lib/";

use Getopt::Long ();
use File::Path qw(mkpath);

my $PERL_BUILD = "$FindBin::Bin/perl-build";

&main;exit 0;

# Provide plenv completions
sub main {
    if (!defined $ENV{PLENV_ROOT}) {
        $ENV{PLENV_ROOT} = "$ENV{HOME}/.plenv";
    }


    if (@ARGV > 0 && $ARGV[0] eq '--complete') {
        print `$^X $PERL_BUILD --definitions`;
        exit 0;
    }

    my (@D, @A, @U);
    my $p = Getopt::Long::Parser->new(
        config => [qw(posix_default no_ignore_case pass_through permute bundling)]
    );
    $p->getoptions(
        'version!'       => \my $version,
        'h|help'         => \my $help,
        'l|list'         => \my $list,
        'as=s'           => \my $as,
        'checkout-dir=s' => \my $checkout_dir,
        'revision=s'     => \my $revision,

        # perl-build args
        'j|jobs=i' => \my $jobs,
        'D=s@'  => \@D,
        'A=s@'  => \@A,
        'U=s@'  => \@U,
    );
    if ($version) {
        print "$Perl::Build::VERSION\n";
        exit 0;
    } elsif ($help) {
        usage();
    } elsif ($list) {
        print "Available versions:\n";
        print `$^X $PERL_BUILD --definitions | sed 's/^/ /g'`;
        exit 0;
    }
    if ($checkout_dir) {
        if (!$revision) {
            if (open my $fh, '<', "$checkout_dir/.git/HEAD") {
                my $line = <$fh>;
                $revision = substr($line, 0, 10) if $line =~ /^[0-9a-f]{10}/i;
                close $fh;
            }
            if (!$revision && open my $fh, '<', "$checkout_dir/.git/FETCH_HEAD") {
                while(<$fh>) {
                    if (/branch 'blead'/) {
                        $revision = substr($_, 0, 10);
                        last;
                    }
                }
                close $fh;
            }
            die "Revision not found.\n" unless $revision;
        }
        $as = "blead-$revision";
        unshift @ARGV, $as if !@ARGV or $ARGV[0] =~ /^blead/;
    }

    my $definition = shift @ARGV or usage();
    if (not defined $as) {
        $as = $definition;
    }
    if ($definition =~ /\A-/) {
        die "You should put `${definition}` as a last argument.\n";
    }
    my $prefix = "$ENV{PLENV_ROOT}/versions/$as";
    if (-d $prefix) {
        die "$prefix is already installed\n";
    }

    my $cache_dir = "$ENV{PLENV_ROOT}/cache/";
    mkpath($cache_dir);
    my $build_dir = "$ENV{PLENV_ROOT}/build/";
    mkpath($build_dir);

    print "Installing $definition as $as\n";

    my @cmd = (
        $^X,
        '--',
        $PERL_BUILD,
        '--symlink-devel-executables',
        '--build-dir'   => $build_dir,
        '--tarball-dir' => $cache_dir,
        '--checkout-dir' => $checkout_dir,
        '--revision' => $revision,
        '-Dusedevel',
        (map { "-D$_" } @D),
        (map { "-A$_" } @A),
        (map { "-U$_" } @U),
        ($jobs ? "--jobs=${jobs}" : ()),
        @ARGV,
        $definition,
        $prefix
    );
    print join(' ', @cmd), "\n";

    system(@cmd) == 0 or die "ABORT\n";

    system("plenv rehash");
}

sub usage {
    open my $fh, '<', $0 or die "$0: $!\n";
    my $buf = '';
    <$fh>; # shebang
    while (<$fh>) {
        s/^#// or last;
        s/^ //;
        $buf .= $_;
    }
    print $buf;
    exit 0;
}


