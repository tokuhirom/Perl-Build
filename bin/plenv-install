#!/usr/bin/env perl
#
# Summary: Install a Perl version using the perl-build plugin
#
# Usage: plenv install [-v|--verbose] <version>
#        plenv install [-v|--verbose] /path/to/definition
#        plenv install -l|--list
#
#   -l/--list        List all available versions
#   -v/--verbose     Verbose mode: print compilation status to stdout
#   --as=<NAME>      Install the definition as <NAME>
#   --test           Run test cases
#   --noman          Skip installation of manpages
#   -D, -A, -U, -j   perl configure options via perl-build
#   --version        show perl-build plugin version
#
# Example:
#   plenv install 5.20.2 -j 8 -Dcc=gcc -UDEBUGGING -Accflags=...
#
# For more options that are passed through perl-build, run `perl-build --help`
# or see: https://metacpan.org/pod/distribution/Perl-Build/script/perl-build#OPTIONS
use strict;
use warnings;
use 5.008001;
use FindBin;

use Getopt::Long ();
use File::Path qw(mkpath);

my $PERL_BUILD = "$FindBin::Bin/perl-build";

&main;exit 0;

# Provide plenv completions
sub main {
    if (!defined $ENV{PLENV_ROOT}) {
        $ENV{PLENV_ROOT} = "$ENV{HOME}/.plenv";
    }


    if (@ARGV > 0 && $ARGV[0] eq '--complete') {
        print `$^X $PERL_BUILD --definitions`;
        exit 0;
    }

    my (@D, @A, @U);
    my $p = Getopt::Long::Parser->new(
        config => [qw(posix_default no_ignore_case pass_through permute bundling)]
    );
    $p->getoptions(
        'version!'       => \my $version,
        'h|help'         => \my $help,
        'l|list'         => \my $list,
        'as=s'           => \my $as,

        # perl-build args
        'j|jobs=i' => \my $jobs,
        'D=s@'  => \@D,
        'A=s@'  => \@A,
        'U=s@'  => \@U,
        'noman' => \my $noman,
    );
    if ($version) {
        exec $^X, $PERL_BUILD, "--version";
        exit 255;
    } elsif ($help) {
        usage();
    } elsif ($list) {
        print "Available versions:\n";
        print `$^X $PERL_BUILD --definitions | sed 's/^/ /g'`;
        exit 0;
    }

    my $definition = shift @ARGV or usage();
    if (not defined $as) {
        $as = $definition;
    }
    if ($definition =~ /\A-/) {
        die "You should put `${definition}` as a last argument.\n";
    }
    my $prefix = "$ENV{PLENV_ROOT}/versions/$as";
    if (-d $prefix) {
        die "$prefix is already installed\n";
    }

    # If we're going to attempt to install from github
    # we need to know the "calculated" name.
    # We optimize slightly by making sure $as matches $definition
    # and doesn't look like any of the things that are likely to
    # mean we are going to install from somewhere else.
    if ( $as eq $definition && $as !~ m{^\d|://|\.(?:gz|bz2|xz)$} ) {
        my $name;
        my $pid = open my $fh, '-|' // die $!;
        if ( !$pid ) {
            open STDERR, '>/dev/null';
            exec $^X, '--', $PERL_BUILD, '--github-name', $definition;
            exit 255;
        }
        ($name) = readline $fh;
        close $fh;
        waitpid $pid, 0;

        if ($name) {
            chomp $name;
            my $prefix = "$ENV{PLENV_ROOT}/versions/$name";
            if ( -d $prefix ) {
                die "$prefix is already installed\n";
            }
        }
    }

    my $cache_dir = "$ENV{PLENV_ROOT}/cache/";
    mkpath($cache_dir);
    my $build_dir = "$ENV{PLENV_ROOT}/build/" . time . ".$$/";
    mkpath($build_dir);

    print "Installing $definition as $as\n";

    my @cmd = (
        $^X,
        '--',
        $PERL_BUILD,
        '--symlink-devel-executables',
        '--build-dir'   => $build_dir,
        '--tarball-dir' => $cache_dir,
        '-Dversiononly',
        (map { "-D$_" } @D),
        (map { "-A$_" } @A),
        (map { "-U$_" } @U),
        ($jobs ? "--jobs=${jobs}" : ()),
        ($noman ? "--noman" : ()),
        @ARGV,
        $definition,
        $prefix
    );
    print join(' ', @cmd), "\n";

    system(@cmd) == 0 or die "ABORT\n";

    system("plenv rehash");
}

sub usage {
    open my $fh, '<', $0 or die "$0: $!\n";
    my $buf = '';
    <$fh>; # shebang
    while (<$fh>) {
        s/^#// or last;
        s/^ //;
        $buf .= $_;
    }
    print $buf;
    exit 0;
}


